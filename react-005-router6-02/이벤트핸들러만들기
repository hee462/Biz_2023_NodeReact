# React의 event 핸들러

- VanilaJS에서 event 핸들러는 보통 다음과 같이 사용한다

```js
const selector = document.querySelector("button");
selector.addEventListner("click", handler);
```

- react에서는 `addEventLisonner` 를 사용하지 않는다. 왜냐하면 이 함수는 한개의 selector(tag)에 대하여 다수의 event가 겹쳐저서 포함된다.
  즉, 한번에 클릭으로 여러번의 Handler가 실해오디는 현상을 만들수 있다. react 는 개발자 인식하지 못하는 상황에서 화면이 rendering되는 경우가 많다.
  이때 rendering 이 되는 과정에서 addEventLisonner함수가 계속 실행되고 event 가 계속 겹쳐서 추가되는 현상이 발생할 수 있다.
- react에서는 VanilaJS에서는 사용을 권하지 않는 inline-script를 사용한다

```jsx
<Button OnClick ={onClickHandler}>

```

## event 핸들러를 부착하는 방법

1.별도의 핸들러 함수를 생성한 후 컴포넌트(tag)에 부착하는 방법

```jsx
const btnOnClickHandler =(e)=>{
    // 버튼이 클릭되었을때 실행할 event 함수
}
<Button onClick={btnOnClickHandler}>

```

2. 컴포넌트(tag)에 직접 callback 함수로 선언하는 방법

```jsx
<Button onClick={()=>{ console.("버튼이 클릭되었을때 실행할 코드")}}>
```

3. Callback 함수에서 다른 함수를 호출하는 방법. 이 방법은 함수에 어떤 변수값 등을 전달하고자 할때 사용하는 방법

- 화면이 rendering 될때 ()=>{} 함수가 실행되고 myFunc 함수 참조주소가 onClick에 부착된다
  Button click 되면 비로소 myFunc 함수를 호출하여 실행을 한다

```jsx
<Button onClick={(e)=>{myFunc(e,value)}}>
```

- 위에 방법에서 잘대 하지 말아야할 코드
- 랜더링 할때마다 함수가 실행되어서 안됌

```jsx
<Button onClick={myFunc(value)}>
// 아래의 코드는 state 값이 연속해서 반복 변경되는 현상이 발생하고
// 화면이 무한 rendering 되는 현상이 발생한다
<Button onClick={setState(state+1)}>
```
